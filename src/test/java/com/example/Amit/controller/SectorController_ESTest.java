/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 24 19:08:04 GMT 2023
 */

package com.example.Amit.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.Amit.controller.SectorController;
import com.example.Amit.model.Sector;
import com.example.Amit.service.SectorService;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SectorController_ESTest extends SectorController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SectorController sectorController0 = new SectorController();
      SectorService sectorService0 = mock(SectorService.class, new ViolatedAssumptionAnswer());
      doReturn((Sector) null).when(sectorService0).save(any(com.example.Amit.model.Sector.class));
      Injector.inject(sectorController0, (Class<?>) SectorController.class, "sectorService", (Object) sectorService0);
      Injector.validateBean(sectorController0, (Class<?>) SectorController.class);
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Sector> responseEntity0 = sectorController0.update(sector0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SectorController sectorController0 = new SectorController();
      Sector sector0 = new Sector("u", "u", "u");
      SectorService sectorService0 = mock(SectorService.class, new ViolatedAssumptionAnswer());
      doReturn(sector0).when(sectorService0).save(any(com.example.Amit.model.Sector.class));
      Injector.inject(sectorController0, (Class<?>) SectorController.class, "sectorService", (Object) sectorService0);
      Injector.validateBean(sectorController0, (Class<?>) SectorController.class);
      ResponseEntity<Sector> responseEntity0 = sectorController0.save((Sector) null);
      assertEquals(201, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SectorController sectorController0 = new SectorController();
      SectorService sectorService0 = mock(SectorService.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(sectorService0).findById(anyString());
      Injector.inject(sectorController0, (Class<?>) SectorController.class, "sectorService", (Object) sectorService0);
      Injector.validateBean(sectorController0, (Class<?>) SectorController.class);
      // Undeclared exception!
      try { 
        sectorController0.findById("+V7? }6-(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.Amit.controller.SectorController", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SectorController sectorController0 = new SectorController();
      Sector sector0 = new Sector("mNMF-i}", "mNMF-i}", "mNMF-i}");
      SectorService sectorService0 = mock(SectorService.class, new ViolatedAssumptionAnswer());
      doReturn(sector0).when(sectorService0).save(any(com.example.Amit.model.Sector.class));
      Injector.inject(sectorController0, (Class<?>) SectorController.class, "sectorService", (Object) sectorService0);
      Injector.validateBean(sectorController0, (Class<?>) SectorController.class);
      ResponseEntity<Sector> responseEntity0 = sectorController0.update(sector0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SectorController sectorController0 = new SectorController();
      SectorService sectorService0 = mock(SectorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(sectorController0, (Class<?>) SectorController.class, "sectorService", (Object) sectorService0);
      Injector.validateBean(sectorController0, (Class<?>) SectorController.class);
      sectorController0.deleteById("Content-Language");
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SectorController sectorController0 = new SectorController();
      SectorService sectorService0 = mock(SectorService.class, new ViolatedAssumptionAnswer());
      doReturn((Sector) null).when(sectorService0).save(any(com.example.Amit.model.Sector.class));
      Injector.inject(sectorController0, (Class<?>) SectorController.class, "sectorService", (Object) sectorService0);
      Injector.validateBean(sectorController0, (Class<?>) SectorController.class);
      Sector sector0 = mock(Sector.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Sector> responseEntity0 = sectorController0.save(sector0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SectorController sectorController0 = new SectorController();
      SectorService sectorService0 = mock(SectorService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(sectorService0).findAll();
      Injector.inject(sectorController0, (Class<?>) SectorController.class, "sectorService", (Object) sectorService0);
      Injector.validateBean(sectorController0, (Class<?>) SectorController.class);
      ResponseEntity<List<Sector>> responseEntity0 = sectorController0.findAll();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }
}
